//this code for some reason didn't work, but I am still at it

import java.util.* ;
import java.io.*; 
/****************************************************************

    Following is the class structure of the LinkedListNode class:
	
	class LinkedListNode<T> {
    	T data;
    	LinkedListNode<T> next;

    	public LinkedListNode(T data) {
        	this.data = data;
    	}
	}

*****************************************************************/

public class Solution {

	public static boolean isPalindrome(LinkedListNode<Integer> head) {
		// Write your code here!
		LinkedListNode<Integer> dummy=head;
		LinkedListNode<Integer> copydummy=head;
		boolean ans=true;
		LinkedListNode<Integer> temp=head;
		while(temp!=null){
			LinkedListNode<Integer> dummy1=temp;
			dummy.next=dummy1;
			dummy=dummy.next;
			temp=temp.next;
		}
		while(head!=null){
			if(copydummy!=head){
				ans=false;
				break;
			}
			head=head.next;
		}
		return ans;
	}
}


//finally works, and i will remember this concept now

import java.util.* ;
import java.io.*; 
/****************************************************************

    Following is the class structure of the LinkedListNode class:
	
	class LinkedListNode<T> {
    	T data;
    	LinkedListNode<T> next;

    	public LinkedListNode(T data) {
        	this.data = data;
    	}
	}

*****************************************************************/

public class Solution {

	public static boolean isPalindrome(LinkedListNode<Integer> head) {
		// Write your code here!
		if (head == null) {
            return true;
        }

        LinkedListNode<Integer> slow = head;
        LinkedListNode<Integer> fast = head;

        // Find the middle node of the linked list
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        // Reverse the second half of the linked list
        LinkedListNode<Integer> prev = null;
        LinkedListNode<Integer> curr = slow;
        LinkedListNode<Integer> next = null;

        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }

        // Compare the first and second halves of the linked list
        LinkedListNode<Integer> p1 = head;
        LinkedListNode<Integer> p2 = prev;

        while (p2 != null) {
            if (!p1.data.equals(p2.data)) {
                return false;
            }
            p1 = p1.next;
            p2 = p2.next;
        }

        return true;
		
	}
}
