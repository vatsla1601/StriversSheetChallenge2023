//Max Consecutive number of 1's

//I certainly took chatGPT's help in this
//I usually find it difficult to retain the concept of sliding windows, so in the next days I will specifically do sliding window questions

import java.util.ArrayList;

public class Solution {
    public static int longestSubSeg(ArrayList<Integer> arr, int n, int k) {
        int maxLength = 0;  // Variable to store the length of the longest sequence
        int zeroCount = 0;  // Counter for the number of zeroes in the current window
        int start = 0;      // Start index of the current window

        for (int end = 0; end < n; end++) {
            // If the current element is 0, increment the zeroCount
            if (arr.get(end) == 0) {
                zeroCount++;
            }

            // If the number of zeroes exceeds 'k', move the start index of the window
            // until the zeroCount is less than or equal to 'k'
            while (zeroCount > k) {
                if (arr.get(start) == 0) {
                    zeroCount--;
                }
                start++;
            }

            // Update the maxLength if the current window length is greater
            if (end - start + 1 > maxLength) {
                maxLength = end - start + 1;
            }
        }

        return maxLength;
    }
}


//Find missing number

//Brute

public class Solution {
    public static int missingNumber(int []a, int N) {
        // Write your code here.
        int ans=-1;
        for(int i=1; i<=N; i++){
            int flag=0;
            for(int j=0; j<N-1; j++){
                if(a[j]==i){
                    flag=1;
                    break;
                }
            }
            if(flag==0){
                ans=i;
                break;
            }
        }

        return ans;
    }
}

//Better

import java.util.Arrays;
public class Solution {
    public static int missingNumber(int []a, int N) {
        // Write your code here.
    int ans=-1;
       int arr[]=new int[N+1];
       Arrays.fill(arr,0);

       for(int i=0; i<a.length; i++){
           arr[a[i]]=1;
       }

       for(int i=1; i<arr.length; i++){
           if(arr[i]==0){
               ans=i;
               break;
           }
       }
       return ans;
    }
}

//Optimal
//(Sum)

import java.util.Arrays;
public class Solution {
    public static int missingNumber(int []a, int N) {
        // Write your code here.
        
        int sum=0;
        int total=(N*(N+1))/2;

        for(int i=0; i<a.length; i++){
            sum+=a[i];
        }
       return total-sum;
    }
}

//(XOR)

import java.util.Arrays;
public class Solution {
    public static int missingNumber(int []a, int N) {
        // Write your code here.
        
        int xor1=N;
        int xor2=0;

        for(int i=0; i<N-1; i++){
            xor1=xor1^(i+1);
            // 5^0^1^2^3
            xor2=xor2^a[i];
            // 0^1^2^4^5
        }

       return xor1^xor2;
    }
}
