//Max Consecutive number of 1's

//I certainly took chatGPT's help in this
//I usually find it difficult to retain the concept of sliding windows, so in the next days I will specifically do sliding window questions

import java.util.ArrayList;

public class Solution {
    public static int longestSubSeg(ArrayList<Integer> arr, int n, int k) {
        int maxLength = 0;  // Variable to store the length of the longest sequence
        int zeroCount = 0;  // Counter for the number of zeroes in the current window
        int start = 0;      // Start index of the current window

        for (int end = 0; end < n; end++) {
            // If the current element is 0, increment the zeroCount
            if (arr.get(end) == 0) {
                zeroCount++;
            }

            // If the number of zeroes exceeds 'k', move the start index of the window
            // until the zeroCount is less than or equal to 'k'
            while (zeroCount > k) {
                if (arr.get(start) == 0) {
                    zeroCount--;
                }
                start++;
            }

            // Update the maxLength if the current window length is greater
            if (end - start + 1 > maxLength) {
                maxLength = end - start + 1;
            }
        }

        return maxLength;
    }
}

Sure! Let's explain the problem and the code in simpler terms.

// Problem: We are given a list of numbers, where each number is either 0 or 1. We need to find the longest sequence of continuous 1's that can be formed by changing at most 'k' 0's to 1's. We want to know the length of this longest sequence.

// Explanation:

// We start by looking at the first number in the list.
// If the number is 0, we count it as a zero in our current window.
// If the number is 1, we don't need to do anything special.
// We continue moving through the list, looking at each number one by one.
// Whenever we encounter a 0, we increase our count of zeros in the current window.
// If the count of zeros in the current window becomes larger than 'k', it means we have reached the limit of the zeros we can change to ones.
// In that case, we move our window's starting position forward (to the right) until the count of zeros in the window becomes less than or equal to 'k' again.
// While moving the window's starting position, we decrease the count of zeros in the window accordingly.
// After each step, we compare the length of the current window (from the starting position to the current position) with the maximum length we have seen so far.
// We keep track of the maximum length seen so far and update it whenever we find a longer window.
// Finally, we return the maximum length we have found.
// Let's take an example to make it clearer:
// Suppose we have the following list: [1, 1, 0, 1, 1, 0, 0, 1] and k = 1.

// We start with an empty window and move through the list:

// The first number is 1. We have 0 zeros in the window. The maximum length so far is 1.
// The second number is 1. Still 0 zeros. The maximum length remains 1.
// The third number is 0. We have 1 zero in the window now. Since the number of zeros (1) exceeds 'k' (which is 1), we move the window's starting position to the next number (position 2).
// The window becomes [0, 1, 1]. The count of zeros in the window is now 0. The maximum length remains 1.
// We continue moving through the list. The next number is 1. We still have 0 zeros. The maximum length remains 1.
// The next number is 1. No change. The maximum length remains 1.
// The next number is 0. We have 1 zero in the window. Again, we move the window's starting position to the next number (position 5).
// The window becomes [1, 1, 0]. The count of zeros in the window is now 0. The maximum length remains 1.
// We move forward. The next number is 0. We have 1 zero in the window. We move the window's starting position to the next number (position 6).
// The window becomes [1, 0, 0]. The count of zeros in the window is now 1. The maximum length remains 1.
// We move forward. The next number is 1. We still have 1 zero. The maximum length remains 1.
// The final number is 1. We still have 1 zero. The maximum length remains 1.
// In the end, the


//Find missing number

//Brute

public class Solution {
    public static int missingNumber(int []a, int N) {
        // Write your code here.
        int ans=-1;
        for(int i=1; i<=N; i++){
            int flag=0;
            for(int j=0; j<N-1; j++){
                if(a[j]==i){
                    flag=1;
                    break;
                }
            }
            if(flag==0){
                ans=i;
                break;
            }
        }

        return ans;
    }
}

//Better

import java.util.Arrays;
public class Solution {
    public static int missingNumber(int []a, int N) {
        // Write your code here.
    int ans=-1;
       int arr[]=new int[N+1];
       Arrays.fill(arr,0);

       for(int i=0; i<a.length; i++){
           arr[a[i]]=1;
       }

       for(int i=1; i<arr.length; i++){
           if(arr[i]==0){
               ans=i;
               break;
           }
       }
       return ans;
    }
}

//Optimal
//(Sum)

import java.util.Arrays;
public class Solution {
    public static int missingNumber(int []a, int N) {
        // Write your code here.
        
        int sum=0;
        int total=(N*(N+1))/2;

        for(int i=0; i<a.length; i++){
            sum+=a[i];
        }
       return total-sum;
    }
}

//(XOR)

import java.util.Arrays;
public class Solution {
    public static int missingNumber(int []a, int N) {
        // Write your code here.
        
        int xor1=N;
        int xor2=0;

        for(int i=0; i<N-1; i++){
            xor1=xor1^(i+1);
            // 5^0^1^2^3
            xor2=xor2^a[i];
            // 0^1^2^4^5
        }

       return xor1^xor2;
    }
}
