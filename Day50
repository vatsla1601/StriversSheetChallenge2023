//Revrese Pairs

//Brute

import java.util.* ;
import java.io.*; 
import java.util.ArrayList;

public class Solution 
{
    public static int reversePairs(ArrayList<Integer> arr) 
    {
        // Write your code here.
        int ans=0;
        for(int i=0; i<arr.size(); i++){
            for(int j=i; j<arr.size(); j++){
                if(arr.get(i)>2*arr.get(j)){
                    ans++;
                }
            }
        }
        return ans;
    }
}

//All test cases ran in brute only, but because this is a hard level question, lets optimise it

//I saw this from chatgpt

import java.io.*; 
import java.util.ArrayList;

import java.util.*;

public class Solution {
    public static int reversePairs(ArrayList<Integer> arr) {
        return mergeSortAndCount(arr, 0, arr.size() - 1);
    }

    private static int mergeSortAndCount(ArrayList<Integer> arr, int left, int right) {
        if (left >= right) {
            return 0;
        }

        int mid = left + (right - left) / 2;

        int count = mergeSortAndCount(arr, left, mid) + mergeSortAndCount(arr, mid + 1, right);
        count += merge(arr, left, mid, right);

        return count;
    }

    private static int merge(ArrayList<Integer> arr, int left, int mid, int right) {
        int count = 0;
        ArrayList<Integer> temp = new ArrayList<>();

        int i = left;
        int j = mid + 1;

        while (i <= mid && j <= right) {
            if (arr.get(i) <= 2 * (long) arr.get(j)) {
                i++;
            } else {
                count += mid - i + 1;
                j++;
            }
        }

        i = left;
        j = mid + 1;

        while (i <= mid && j <= right) {
            if (arr.get(i) <= arr.get(j)) {
                temp.add(arr.get(i));
                i++;
            } else {
                temp.add(arr.get(j));
                j++;
            }
        }

        while (i <= mid) {
            temp.add(arr.get(i));
            i++;
        }

        while (j <= right) {
            temp.add(arr.get(j));
            j++;
        }

        for (i = left; i <= right; i++) {
            arr.set(i, temp.get(i - left));
        }

        return count;
    }
}


//Yes, the given reversePairs function can be optimized to improve its time complexity. 
//The current implementation has a time complexity of O(n^2), where n is the size of the input ArrayList arr. 
//This is because it uses two nested loops to compare each element with all subsequent elements in the list.

//We can use a more efficient algorithm to reduce the time complexity to O(n*log(n)) by using a modified version of the merge sort algorithm.

