//this is dp q, that I have done earlier from strivers playlist

//good dp revision of problems on grid/2d matrix

//Recursive approach

import java.util.* ;
import java.io.*; 
public class Solution {
	public static int uniquePaths(int m, int n) {
		// Write your code here.
		return recursion(m-1,n-1);

	}

	public static int recursion(int i, int j){
		if(i==0 && j==0){
			return 1;
		}
		if(i<0 || j<0){
			return 0;
		}
		int up=recursion(i-1, j);
		int left=recursion(i, j-1);

		return up+left;
	}
}

//Memoization

import java.util.* ;
import java.io.*; 
public class Solution {
	public static int uniquePaths(int m, int n) {
		// Write your code here.
		int dp[][] = new int[m][n];
		for(int i=0; i<m; i++){
			Arrays.fill(dp[i],-1);
		}
		return recursion(m-1,n-1, dp);

	}

	public static int recursion(int i, int j, int dp[][]){
		if(i==0 && j==0){
			return 1;
		}
		if(i<0 || j<0){
			return 0;
		}
		if(dp[i][j]!=-1){
			return dp[i][j];
		}
		int up=recursion(i-1, j, dp);
		int left=recursion(i, j-1, dp);
		dp[i][j]=up+left;
		return dp[i][j];
	}
}

//Tabulation

import java.util.*;
import java.io.*;

public class Solution {
    public static int uniquePaths(int m, int n) {
        int dp[][] = new int[m][n];
        for (int i = 0; i < m; i++) {
            Arrays.fill(dp[i], -1);
        }

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 && j == 0) {
                    dp[i][j] = 1;
                }
                else {
                    int up = 0;
                    int left = 0;

                    if (i>0) {
                        up = dp[i - 1][j];
                    }
                    if (j>0) {
                        left = dp[i][j - 1];
                    }

                    dp[i][j] = up + left;
                }
            }
        }

        return dp[m - 1][n - 1];
    }
}




